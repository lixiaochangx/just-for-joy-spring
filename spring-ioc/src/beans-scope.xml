<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
		1. 默认情况下, IOC 容器中的 bean 是单例的! 若对象是单例的, 则在创建 IOC 容器时即创建 bean 的实例, 并对 bean 的属性进行初始化.
		2. 可以通过 bean 的 scope 属性来修改 bean 的作用域. 若取值为 prototype, 则 bean 为原型的: 每次向容器获取实例, 得到的都是一个新的对象.
		而且, 不在创建 IOC 容器时创建 bean 的实例了.
		3. IOC 容器中 bean 的生命周期:
		3.1 一般地, 讨论 bean 的生命周期, 是建立在 bean 是单例的基础上的.
		3.2 可以为 bean 指定 init 和 destroy 方法
		3.3 还可以通过 bean 的后置处理器来更加丰富 bean 的生命周期方法(面试时.).
	-->

    <!-- 默认情况下 bean 是单例的! -->
    <!-- 但有的时候, bean 就不能使单例的. 例如: Struts2 的 Action 就不是单例的! 可以通过 scope 属性来指定 bean 的作用域 -->
    <!--
        prototype: 原型的. 每次调用 getBean 方法都会返回一个新的 bean. 且在第一次调用 getBean 方法时才创建实例
        singleton: 单例的. 每次调用 getBean 方法都会返回同一个 bean. 且在 IOC 容器初始化时即创建 bean 的实例. 默认值
    -->

    <!-- 使用bean的scope属性来配置bean的作用域，
		 singleton：默认值，容器初始时创建的bean实例，在整个容器的生命周期内只创建一个bean，单例的。
		 prototype:原型的，容器初始化时不创建bean的实例，而在每次请求时都创建一个新的bean实例，并返回。-->
    <bean id="car" class="com.xc.justforjoy.entity.Car" scope="prototype">
        <property name="brand" value="Audi"></property>
        <property name="price" value="300000"></property>
    </bean>

</beans>